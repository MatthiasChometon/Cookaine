import { Injectable } from '@nestjs/common'import { PassportStrategy } from '@nestjs/passport'import { ExtractJwt, Strategy } from 'passport-jwt'import { InjectRepository } from '@nestjs/typeorm'import { Repository } from 'typeorm'import { UserStatus } from 'src/user/enums/user-status.enum'import { User } from 'src/user/methods/user.methods'@Injectable()export class JwtStrategy extends PassportStrategy(Strategy) {	constructor(		@InjectRepository(User)		private userRepository: Repository<User>,	) {		super({			jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),			ignoreExpiration: false,			secretOrKey: process.env.ACCESS_TOKEN_SECRET,		})	}	// eslint-disable-next-line @typescript-eslint/no-explicit-any	async validate(payload: any): Promise<User> {		const id = payload.sub		const user = await this.userRepository.findOneByOrFail({			id,			status: UserStatus.isActive,		})		return user	}}