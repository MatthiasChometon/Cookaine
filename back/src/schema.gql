# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CreateIngredientInput {
  mesureUnits: [MesureUnit!]!
  name: String!
  previewPicture: String!
}

input CreateUserInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum Difficulty {
  easy
  hard
  medium
}

input FilterInput {
  isFromConnectedUser: Boolean
  pagination: PaginationInput
  search: String
  userId: String
}

type Ingredient {
  id: ID!
  name: String!
  previewPicture: String!
}

type IngredientOuput {
  ingredientId: ID!
  mesureUnit: MesureUnit!
  name: String!
  possibleMesureUnits: [MesureUnit!]!
  previewPicture: String!
  quantity: Int!
  recipeIngredientId: ID!
}

type LoginResponse {
  accessToken: String!
  refreshToken: String!
  user: User!
}

input LoginUserInput {
  email: String!
  password: String!
}

enum MesureUnit {
  Centiliters
  Gram
  Kilogram
  Liter
  Milliliter
  Pinch
  Sachet
  Tablespoon
  Teaspoon
  Unity
}

type Mutation {
  banUser(id: String!): User!
  confirmEmail(email: String!, emailCode: Float!): LoginResponse!
  createIngredient(input: CreateIngredientInput!): Ingredient!
  login(loginUserInput: LoginUserInput!): LoginResponse!
  refreshTokens(refreshToken: String!): LoginResponse!
  register(createUserInput: CreateUserInput!): User!
  resetPassword(email: String!, emailCode: Float!, newPassword: String!): LoginResponse!
  sendRegisterConfirmation(email: String!): User!
  sendResetPasswordCode(email: String!): String!
  updateAccount(updateUserInput: UpdateUserInput!): User!
  updateIngredient(id: String!, input: UpdateIngredientInput!): Ingredient!
}

enum OrderDirection {
  ASC
  DESC
}

input PaginationInput {
  itemsPerPage: Int!
  page: Int!
}

type Query {
  account: User!
  ingredients: [Ingredient!]!
  recipes(options: RecipeSearchInput!): [RecipeOutput!]!
  tags: [Tag!]!
  user(id: String!): User!
  users: [User!]!
}

type Recipe {
  cookingTime: String!
  creationDate: DateTime!
  creator: User!
  difficulty: Difficulty!
  id: ID!
  portion: Int!
  previewPicture: String!
  steps: [String!]!
  title: String!
  tutorialVideo: String!
}

input RecipeOrderInput {
  direction: OrderDirection!
  name: RecipeOrderName!
}

enum RecipeOrderName {
  creationDate
}

type RecipeOutput {
  cookingTime: String!
  creationDate: DateTime!
  creator: User!
  difficulty: Difficulty!
  id: ID!
  ingredients: [IngredientOuput!]!
  portion: Int!
  previewPicture: String!
  steps: [String!]!
  title: String!
  tutorialVideo: String!
}

input RecipeSearchInput {
  filterBy: FilterInput = {}
  orderBy: RecipeOrderInput = {direction: DESC, name: creationDate}
}

type RecipeTag {
  id: ID!
  recipe: Recipe!
  tag: Tag!
}

type Tag {
  id: ID!
  name: String!
  recipeTags: [RecipeTag!]!
}

input UpdateIngredientInput {
  mesureUnits: [MesureUnit!]
  name: String
  previewPicture: String
}

input UpdateUserInput {
  firstName: String
  lastName: String
  password: String
}

type User {
  email: String!
  id: ID!
  recipes: [Recipe!]!
  role: UserRoles!
  status: UserStatus!
}

enum UserRoles {
  admin
  user
}

enum UserStatus {
  isActive
  isBanned
  isPending
}